/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <150>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_taskmgr {
            timeout-ms = <40>;
            key-positions = <3 4 5>;
            bindings = <&kp LC(LS(ESC))>;
        };    
        combo_CAD {
            timeout-ms = <40>;
            key-positions = <3 4 5 6>;
            bindings = <&kp LC(LA(DEL))>;
        };    
        combo_kapp {
            timeout-ms = <40>;
            key-positions = <31 11>;
            bindings = <&kp K_APP>;
        };    
        combo_lgui {
            timeout-ms = <40>;
            key-positions = <31 10>;
            bindings = <&kp LGUI>;
        };     
        combo_lalt {
            timeout-ms = <40>;
            key-positions = <31 12>;
            bindings = <&kp LALT>;
        };     
        combo_lctl {
            timeout-ms = <40>;
            key-positions = <31 13>;
            bindings = <&kp LCTL>;
        };    
        combo_lctlT {
            timeout-ms = <50>;
            key-positions = <31 12 13>;
            layers = <0>;
            bindings = <&kp LC(T)>;
        };    
        combo_lctlsftT {
            timeout-ms = <50>;
            key-positions = <30 12 13>;
            layers = <0>;
            bindings = <&kp LC(LS(T))>;
        };    
        combo_L1 {
            timeout-ms = <40>;
            key-positions = <31 23>;
            layers = <0>;
            bindings = <&to 1>;
        };    
        combo_L2 {
            timeout-ms = <40>;
            key-positions = <31 23>;
            layers = <1>;
            bindings = <&to 2>;
        };          
        combo_L3 {
            timeout-ms = <40>;
            key-positions = <31 23>;
            layers = <2>;
            bindings = <&to 3>;
        };      
        
        combo_sl2 {
            timeout-ms = <100>;
            key-positions = <30 33>;
            bindings = <&sl 2>;
        };  
        
        combo_rctl {
            timeout-ms = <40>;
            key-positions = <32 16>;
            bindings = <&kp RCTL>;
        };       
        combo_ralt {
            timeout-ms = <40>;
            key-positions = <32 17>;
            bindings = <&kp RALT>;
        };       
        combo_rgui {
            timeout-ms = <40>;
            key-positions = <32 19>;
            bindings = <&kp RGUI>;
        };    
        combo_rsl2 {
            timeout-ms = <40>;
            key-positions = <32 18>;
            bindings = <&sl 2>;
        };          
        combo_rL1 {
            timeout-ms = <40>;
            key-positions = <32 26>;
            layers = <0>;
            bindings = <&to 1>;
        };   
        combo_rL2 {
            timeout-ms = <40>;
            key-positions = <32 26>;
            layers = <1>;
            bindings = <&to 2>;
        };  
        combo_rL3 {
            timeout-ms = <40>;
            key-positions = <32 26>;
            layers = <2>;
            bindings = <&to 3>;
        };  
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <8 9>;
            layers = <0>;
            bindings = <&kp SEMI>;
        };  
        combo_backslash {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <0>;
            bindings = <&kp BSLH>;
        };  
        combo_F2 {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <1>;
            bindings = <&kp F2>;
        };  
        combo_PGDN {
            timeout-ms = <50>;
            key-positions = <12 13>;
            layers = <1>;
            bindings = <&kp PG_DN>;
        };  
        combo_PGUP {
            timeout-ms = <50>;
            key-positions = <2 3>;
            layers = <1>;
            bindings = <&kp PG_UP>;
        };  
        combo_selectall {
            timeout-ms = <50>;
            key-positions = <10 11>;
            layers = <1>;
            bindings = <&kp LC(A)>;
        };  
        combo_undo {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <1>;
            bindings = <&kp LC(Z)>;
        };  
        combo_wintab {
            timeout-ms = <50>;
            key-positions = <10 12>;
            layers = <1>;
            bindings = <&kp LA(TAB)>;
        };  
        combo_ctrltab {
            timeout-ms = <50>;
            key-positions = <11 13>;
            layers = <1>;
            bindings = <&kp LC(TAB)>;
        };  
        combo_ctrlshifttab {
            timeout-ms = <50>;
            key-positions = <1 3>;
            layers = <1>;
            bindings = <&kp LC(LS(TAB))>;
        };  
   
    };
    
    
    behaviors {
        volUnext: vol_up_next {
            compatible = "zmk,behavior-mod-morph";
            label = "VOL_UP_NEXT";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_NEXT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        volDprev: vol_dn_prev {
            compatible = "zmk,behavior-mod-morph";
            label = "VOL_DN_PREV";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_PREV>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };


        keymap {
                compatible = "zmk,keymap";
                
        default_layer {
        bindings = <
        &kp Y  &kp C  &kp L  &kp M   &kp K             &kp Z  &kp F  &kp U      &kp COMMA  &kp SQT 
        &kp I  &kp S  &kp R  &kp T   &kp G             &kp P  &kp N  &kp E      &kp A      &kp O
        &kp Q  &kp V  &kp W  &kp D   &kp J             &kp B  &kp H  &kp SLASH  &kp DOT    &kp X
                           &kp LSHIFT  &lt 1 SPACE   &lt 1 SPACE  &kp RSHIFT
        >;
        };   
  
        left_layer {
        bindings = <
        &kp LS(TAB)  &kp HOME     &kp UP    &kp END        &kp BSPC    &kp BSPC   &kp NUM_7  &kp NUM_8  &kp NUM_9  &kp EQUAL  
        &kp TAB      &kp LEFT     &kp DOWN  &kp RIGHT      &kp RET     &kp RET    &kp NUM_4  &kp NUM_5  &kp NUM_6  &kp MINUS  
        &kp ESC      &kp LC(LEFT) &kp C_PP  &kp LC(RIGHT)  &kp DEL     &kp DEL    &kp NUM_1  &kp NUM_2  &kp NUM_3  &kp NUM_0  
                                            &trans         &to 0       &to 0      &trans      
        >;
        };
        
        right_layer {
        bindings = <
        &kp EXCL    &kp AT     &kp HASH  &kp DLLR   &kp PRCNT    &kp BSPC   &kp AMPS   &kp STAR  &kp CARET &kp SEMI   
        &kp GRAVE   &kp PG_UP  &kp BSLH  &kp PG_DN  &kp RET      &kp RET    &kp LPAR   &kp RPAR  &kp LBRC  &kp RBRC 
        &kp C_MUTE  &volDprev  &kp C_PP  &volUnext  &kp DEL      &kp DEL    &kp LBKT   &kp RBKT  &kp LT    &kp GT  
                                         &trans     &to 0        &to 0      &trans    
        >;
        };  
        
        tri_layer {
        bindings = <
        &kp F1      &kp F2      &kp F3      &kp F4     &kp BSPC    &kp BSPC   &bt BT_CLR  &out OUT_USB &out OUT_BLE    &kp INS     
        &kp F5      &kp F6      &kp F7      &kp F8     &kp RET     &kp RET    &bt BT_NXT  &bt BT_SEL 0 &bt BT_SEL 1    &bt BT_SEL 2 
        &kp F9      &kp F10     &kp F11     &kp F12    &kp DEL     &kp DEL    &bt BT_PRV  &kp PSCRN    &kp PAUSE_BREAK &kp SLCK    
                                            &trans     &to 0       &to 0      &trans    
        >;
        };  
        
    };
};
